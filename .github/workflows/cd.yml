name: CD

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Copie TOUT le repo dans le home (~) de l'utilisateur sur la VM
      - name: Copy repo to VM home (~)
        run: |
          # Créer un répertoire temporaire pour l'archive
          mkdir -p /tmp/deploy
          cp -r . /tmp/deploy/project
          
          # Nettoyer les fichiers indésirables
          find /tmp/deploy/project -name ".git" -type d -exec rm -rf {} + 2>/dev/null || true
          find /tmp/deploy/project -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          find /tmp/deploy/project -name "*.pyc" -type f -delete 2>/dev/null || true
          find /tmp/deploy/project -name ".github/workflows/*.yml~" -type f -delete 2>/dev/null || true
          
          # Créer l'archive depuis le répertoire temporaire
          cd /tmp/deploy
          tar -czf project.tar.gz project/
          
          # Copier l'archive vers la VM
          scp -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              project.tar.gz ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/
          
          # Extraire l'archive sur la VM
          ssh -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
              "rm -rf ~/log430-a25-labo3 && mkdir -p ~/log430-a25-labo3 && cd ~/log430-a25-labo3 && tar -xzf ~/project.tar.gz --strip-components=1 && rm ~/project.tar.gz"
          
          # Nettoyer le répertoire temporaire
          rm -rf /tmp/deploy

      - name: Remote deploy (docker compose up -d) from ~
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            set -e
            cd ~/log430-a25-labo3
            
            # Réseau externe partagé si absent
            docker network create labo03-network || true

            # .env de prod (si non présent déjà sur la VM)
            if [ ! -f .env ]; then
              cat <<ENVEOF > .env
              DB_HOST=mysql
              DB_PORT=3306
              DB_NAME=labo03_db
              DB_USER=labo03
              DB_PASS=labo03
              REDIS_HOST=redis
              REDIS_PORT=6379
              REDIS_DB=0
              ENVEOF
            fi

            # Build & run
            docker compose pull || true
            docker compose build
            docker compose up -d

            # (Optionnel) Nettoyage images dangling
            docker image prune -f || true

            # (Optionnel) Healthcheck applicatif
            # sleep 5 && curl -sf http://localhost:5000/health-check || (echo "Healthcheck failed" && exit 1)
          EOF
