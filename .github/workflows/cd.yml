name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install ssh/rsync tools
        run: |
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends sshpass rsync openssh-client
            # ✅ Créer le répertoire ~/.ssh avant d’écrire known_hosts
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            # Option 1: enregistrer la clé host (sécuritaire)
            ssh-keyscan -H "${{ secrets.VM_HOST }}" >> ~/.ssh/known_hosts
            chmod 644 ~/.ssh/known_hosts

      - name: Sync repo to VM home (~) over SSH
        env:
          SSHPASS: ${{ secrets.VM_PASSWORD }}
        run: |
          # Copie dans ~ (pas de chemin spécifique)
          # --delete pour retirer les fichiers obsolètes côté VM
          sshpass -e rsync -az --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='**/__pycache__' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/"

      - name: Remote deploy (docker compose up -d) from ~
        env:
          SSHPASS: ${{ secrets.VM_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no \
            "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}" '
              set -e
              cd ~
              # Réseau externe partagé (si absent)
              docker network create labo03-network || true

              # .env de prod (créé une seule fois si absent)
              if [ ! -f .env ]; then
                cat <<EOF > .env
                DB_HOST=mysql
                DB_PORT=3306
                DB_NAME=labo03_db
                DB_USER=labo03
                DB_PASS=labo03
                REDIS_HOST=redis
                REDIS_PORT=6379
                REDIS_DB=0
                EOF
              fi

              # Build/Up
              docker compose pull || true
              docker compose build
              docker compose up -d

              # (Optionnel) Nettoyer les images inutilisées
              docker image prune -f || true